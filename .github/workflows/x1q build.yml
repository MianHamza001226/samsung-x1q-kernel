name: Build y2q kernel

on:
  workflow_dispatch:
    inputs:
      build_target:
        description: 'Build target (all, Image, dtbs, or dtbo.img)'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - Image
        - dtbs
        - dtbo.img

env:
  ARTIFACT_DIR: kernel_artifacts_${{ github.run_number }}

jobs:
  buildkernel:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout repository
      - uses: actions/checkout@v4
        with:
          submodules: recursive
        
      # Setup environment
      - name: Setup environment
        run: |
          sudo apt-get update && sudo apt-get install -y \
            bc flex git ccache automake lzop bison gperf build-essential \
            zip curl zlib1g-dev g++-multilib python3-networkx libxml2-utils \
            bzip2 libbz2-dev squashfs-tools pngcrush schedtool dpkg-dev \
            liblz4-tool optipng libssl-dev python-is-python3 python3-virtualenv \
            llvm clang lld

      # Initialize submodules
      - name: Initialize submodules
        run: git submodule update --init --recursive

      # Update SuSFS to latest
      - name: Update SuSFS
        run: |
          echo "Fetching latest SuSFS..."
          git clone https://github.com/sykopompos/susfs.git susfs_tmp
          rm -rf fs/sufs
          cp -r susfs_tmp/fs/sufs fs/
          rm -rf susfs_tmp
          echo "SuSFS updated."

      # Create artifact directory with unique name
      - name: Create artifact directory
        run: |
          echo "Creating artifact directory: ${{ env.ARTIFACT_DIR }}"
          mkdir -p "${{ env.ARTIFACT_DIR }}" || {
            echo "Failed to create directory, trying with sudo..."
            sudo mkdir -p "${{ env.ARTIFACT_DIR }}" && sudo chown -R runner:runner "${{ env.ARTIFACT_DIR }}"
          }
          ls -la

      # Set permissions
      - name: Set permissions
        run: chmod +x y2q.sh

      # Build kernel
      - name: Build kernel
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHATID: ${{ secrets.TELEGRAM_CHATID }}
        run: |
          sudo bash y2q.sh ${{ github.event.inputs.build_target }}

      # Prepare artifacts
      - name: Prepare artifacts
        run: |
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [[ -f out/arch/arm64/boot/dtbo.img ]]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi

      # Check SuSFS version in built kernel
      - name: Check SuSFS version
        run: |
          echo "Checking SuSFS version inside kernel..."
          strings out/arch/arm64/boot/Image* | grep -i sufs || echo "No SuSFS found"

      # Upload kernel artifact
      - name: Upload kernel to artifact
        uses: actions/upload-artifact@v4
        with:
          name: output_kernel
          path: AnyKernel3/*

name: Kernel Build y2q with SuSFS

on:
  workflow_dispatch:

env:
  ARTIFACT_DIR: kernel_artifacts
  DEVICE: y2q
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHATID: ${{ secrets.TELEGRAM_CHATID }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v3

      - name: Setup environment
        run: |
          sudo apt update
          sudo apt install -y git wget curl lz4 tar openssl python3 gcc make clang zip

      - name: Fetch latest SuSFS (private repo)
        run: |
          echo "Fetching latest SuSFS (private)..."
          git clone https://x-access-token:${GH_TOKEN}@github.com/sykopompos/susfs.git susfs_tmp
          rm -rf fs/sufs
          cp -r susfs_tmp/fs/sufs fs/
          rm -rf susfs_tmp
          echo "✅ SuSFS updated."

      - name: Build Kernel for y2q
        run: |
          echo "🔨 Starting kernel build for $DEVICE..."
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          make ${DEVICE}_defconfig
          make -j$(nproc)

          mkdir -p $ARTIFACT_DIR
          cp arch/arm64/boot/Image* $ARTIFACT_DIR/ || true
          cp arch/arm64/boot/dtbo.img $ARTIFACT_DIR/ || true
          cp arch/arm64/boot/*.dtb $ARTIFACT_DIR/ || true

      - name: Clone AnyKernel3
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3

      - name: Prepare AnyKernel3 flashable zip
        run: |
          cd AnyKernel3
          echo "Copying kernel files..."
          cp ../$ARTIFACT_DIR/Image* ./
          cp ../$ARTIFACT_DIR/dtbo.img ./
          cp ../$ARTIFACT_DIR/*.dtb ./ || true

          # Generate anykernel.sh
          cat > anykernel.sh <<EOF
          #!/sbin/sh
          # AnyKernel3 Ramdisk Mod Script
          properties() { '
          kernel.string=SuSFS Kernel by Hamza
          do.devicecheck=1
          do.modules=0
          do.systemless=1
          device.name1=$DEVICE
          supported.versions=11-13
          supported.patchlevels=2020-2025
          '; }
          block=boot;
          is_slot_device=0;
          ramdisk_compression=auto;
          patch_vbmeta_flag=auto;
          EOF

          chmod +x anykernel.sh

          cd ..
          zip -r9 kernel-${DEVICE}-susfs.zip AnyKernel3/*

          mv kernel-${DEVICE}-susfs.zip $ARTIFACT_DIR/

      - name: Upload Flashable Kernel Zip
        uses: actions/upload-artifact@v4
        with:
          name: Flashable-Kernel
          path: ${{ env.ARTIFACT_DIR }}/*.zip

      - name: Telegram Notification (success)
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ env.TELEGRAM_CHATID }} \
          -d text="✅ Kernel build for y2q finished! Flashable zip is uploaded."

      
          curl -s -X POST https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ env.TELEGRAM_CHATID }} \
          -d text="❌ Kernel build failed. Check GitHub Actions logs."
